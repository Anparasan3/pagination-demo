{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","items","setItems","useEffect","a","fetch","res","json","data","getComments","console","log","fetchComments","currentPage","handlePageClick","selected","commentsformserver","map","id","productName","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakClassName","breakLinkClassName","activeClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAGe,SAASA,IAEtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEACAC,MAAK,mDADL,cACZC,EADY,gBAKCA,EAAIC,OALL,OAKZC,EALY,OAMlBN,EAASM,GANS,2CAAH,qDAQjBC,KACC,IACHC,QAAQC,IAAIV,GAEd,IAAMW,EAAa,uCAAG,WAAOC,GAAP,iBAAAT,EAAA,sEACFC,MAAM,wCAAD,OACmBQ,EADnB,cADH,cACdP,EADc,gBAIDA,EAAIC,OAJH,cAIdC,EAJc,yBAKbA,GALa,2CAAH,sDASXM,EAAe,uCAAG,WAAON,GAAP,iBAAAJ,EAAA,6DACtBM,QAAQC,IAAIH,EAAKO,UACbF,EAAcL,EAAKO,SAAW,EAFZ,SAGWH,EAAcC,GAHzB,OAGhBG,EAHgB,OAItBd,EAASc,GAJa,2CAAH,sDAOrB,OACE,gCAEIf,EAAMgB,KAAI,SAAChB,GACT,OACE,8BACE,8BACE,gCAIE,6BAAKA,EAAMiB,KACX,6BAAKjB,EAAMkB,wBAOvB,cAAC,IAAD,CACAC,cAAe,KACfC,UAAW,KACXC,WAAY,MACZC,UAAW,GACXC,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAcZ,EACda,mBAAoB,oCACpBC,cAAe,YACfC,kBAAmB,YACnBC,kBAAmB,YACnBC,sBAAuB,YACvBC,cAAe,YACfC,kBAAmB,YACnBC,eAAgB,YAChBC,mBAAoB,YACpBC,gBAAiB,cCxEvB,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjD,EAAD,MAEFkD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9b55c99.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\n\nexport default function App() {\n\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    const getComments = async () => {\n      const res = await fetch(\n        //`https://jsonplaceholder.typicode.com/comments?_page=1&_limit=12`\n        `http://localhost:3004/comments?_page=1&_limit=6`\n      );\n      const data = await res.json();\n      setItems(data);\n    };\n    getComments();\n  }, [])\n  console.log(items);\n\nconst fetchComments = async (currentPage) => {\n  const res = await fetch(\n    `http://localhost:3004/comments?_page=${currentPage}&_limit=6`\n  )\n  const data = await res.json();\n  return data;\n}\n\n\n  const handlePageClick = async (data) => {\n    console.log(data.selected);\n    let currentPage = data.selected + 1 \n    const commentsformserver = await fetchComments(currentPage);\n    setItems(commentsformserver);\n  }  \n\n  return (\n    <div>\n      {\n        items.map((items) => {\n          return(\n            <div>\n              <div>\n                <div>\n                  {/* <h5>ID :{items.id}</h5>\n                  <h6>{items.email}</h6>\n                  <p>{items.body}</p> */}\n                  <h5>{items.id}</h5>\n                  <h5>{items.productName}</h5>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      }\n      <ReactPaginate \n      previousLabel={'<<'}\n      nextLabel={'>>'}\n      breakLabel={'***'}\n      pageCount={25}\n      marginPagesDisplayed={1}\n      pageRangeDisplayed={3}\n      onPageChange={handlePageClick}\n      containerClassName={'pagination justify-content-center'}\n      pageClassName={'page-item'}\n      pageLinkClassName={'page-link'}\n      previousClassName={'page-item'}\n      previousLinkClassName={'page-link'}\n      nextClassName={'page-item'}\n      nextLinkClassName={'page-link'}\n      breakClassName={'page-item'}\n      breakLinkClassName={'page-link'}\n      activeClassName={'active'}\n      />\n    </div>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}